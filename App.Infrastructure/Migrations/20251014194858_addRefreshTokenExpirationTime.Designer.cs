// <auto-generated />
using System;
using App.Infrastructure.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(RoadCityDbContext))]
    [Migration("20251014194858_addRefreshTokenExpirationTime")]
    partial class addRefreshTokenExpirationTime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Core.Domain.IdentityModels.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("App.Core.Domain.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpirationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("App.Core.Domain.Models.Difficulty", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("difficulties");

                    b.HasData(
                        new
                        {
                            id = new Guid("ddddddd1-dddd-dddd-dddd-ddddddddddd1"),
                            Name = "Hard"
                        },
                        new
                        {
                            id = new Guid("ddddddd2-dddd-dddd-dddd-ddddddddddd2"),
                            Name = "Easy"
                        },
                        new
                        {
                            id = new Guid("ddddddd3-dddd-dddd-dddd-ddddddddddd3"),
                            Name = "Medium"
                        });
                });

            modelBuilder.Entity("App.Core.Domain.Models.Region", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("regions");

                    b.HasData(
                        new
                        {
                            id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Code = "RG-001",
                            Name = "Northern Highlands",
                            RegionImageUrl = "https://example.com/images/northern_hills.jpg"
                        },
                        new
                        {
                            id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Code = "RG-002",
                            Name = "Desert Plains",
                            RegionImageUrl = "https://example.com/images/desert_plains.jpg"
                        },
                        new
                        {
                            id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Code = "RG-003",
                            Name = "Coastal Edge",
                            RegionImageUrl = "https://example.com/images/coastal_edge.jpg"
                        },
                        new
                        {
                            id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Code = "RG-004",
                            Name = "Forest Path",
                            RegionImageUrl = "https://example.com/images/forest_path.jpg"
                        },
                        new
                        {
                            id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Code = "RG-005",
                            Name = "Urban Loop",
                            RegionImageUrl = "https://example.com/images/urban_loop.jpg"
                        });
                });

            modelBuilder.Entity("App.Core.Domain.Models.Road", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoadImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("difficultyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("regionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("difficultyID");

                    b.HasIndex("regionId");

                    b.ToTable("roads");

                    b.HasData(
                        new
                        {
                            id = new Guid("aaaaaaa1-aaaa-aaaa-aaaa-aaaaaaaaaaa1"),
                            Description = "A scenic mountain road with sharp curves.",
                            LengthInKm = 12.5,
                            Name = "Hilltop Pass",
                            RoadImageUrl = "https://example.com/images/hilltop_pass.jpg",
                            difficultyID = new Guid("ddddddd2-dddd-dddd-dddd-ddddddddddd2"),
                            regionId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            id = new Guid("aaaaaaa2-aaaa-aaaa-aaaa-aaaaaaaaaaa2"),
                            Description = "A flat road through the desert, good for beginners.",
                            LengthInKm = 25.0,
                            Name = "Sandy Trail",
                            RoadImageUrl = "https://example.com/images/sandy_trail.jpg",
                            difficultyID = new Guid("ddddddd2-dddd-dddd-dddd-ddddddddddd2"),
                            regionId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            id = new Guid("aaaaaaa3-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            Description = "Beautiful road along the coastline with sea views.",
                            LengthInKm = 18.199999999999999,
                            Name = "Ocean Drive",
                            RoadImageUrl = "https://example.com/images/ocean_drive.jpg",
                            difficultyID = new Guid("ddddddd2-dddd-dddd-dddd-ddddddddddd2"),
                            regionId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            id = new Guid("aaaaaaa4-aaaa-aaaa-aaaa-aaaaaaaaaaa4"),
                            Description = "A quiet road through dense pine forests.",
                            LengthInKm = 9.6999999999999993,
                            Name = "Pinewood Route",
                            RoadImageUrl = "https://example.com/images/pinewood_route.jpg",
                            difficultyID = new Guid("ddddddd3-dddd-dddd-dddd-ddddddddddd3"),
                            regionId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            id = new Guid("aaaaaaa5-aaaa-aaaa-aaaa-aaaaaaaaaaa5"),
                            Description = "Circular road inside the city, heavy traffic.",
                            LengthInKm = 5.2999999999999998,
                            Name = "City Circuit",
                            RoadImageUrl = "https://example.com/images/city_circuit.jpg",
                            difficultyID = new Guid("ddddddd1-dddd-dddd-dddd-ddddddddddd1"),
                            regionId = new Guid("55555555-5555-5555-5555-555555555555")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Core.Domain.Models.Road", b =>
                {
                    b.HasOne("App.Core.Domain.Models.Difficulty", "difficulty")
                        .WithMany("roads")
                        .HasForeignKey("difficultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Core.Domain.Models.Region", "region")
                        .WithMany("roads")
                        .HasForeignKey("regionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("difficulty");

                    b.Navigation("region");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("App.Core.Domain.IdentityModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("App.Core.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("App.Core.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("App.Core.Domain.IdentityModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Core.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("App.Core.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Core.Domain.Models.Difficulty", b =>
                {
                    b.Navigation("roads");
                });

            modelBuilder.Entity("App.Core.Domain.Models.Region", b =>
                {
                    b.Navigation("roads");
                });
#pragma warning restore 612, 618
        }
    }
}
